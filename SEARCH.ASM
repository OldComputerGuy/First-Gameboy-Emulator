;*****************************************************************************
;		SEARCHING SYMBOLS AND INSERTING SYMBOLS
;*****************************************************************************

;*********************************
;	 LABEL STRUCTURE
;VARS    SI+0   TYPE(B)
;        SI+1   VALUE(L)
;	 SI+5   NAMELEN(B)
;	 SI+6   NAME(NAMELEN)
;*********************************

LAB_TYPE	=	0
LAB_FLAGS	=	1

LAB_VALUE0	=	2		;VALUE EBX
LAB_VALUE1	=	3
LAB_VALUE2	=	4
LAB_VALUE3	=	5

LAB_VALUE4	=	6
LAB_VALUE5	=	7

LAB_NAMELEN	=	8
LAB_NAME	=	9

;*********************************
;	      FLAGS
;*********************************

FLAG_NULL	=	0
FLAG_NORM	=	1
FLAG_REG	=	2
FLAG_LOCAL	=	3

;*********************************
;            FIND LABEL
;      CS:SI POINTS TO LABEL
;	  CX LABEL NUMBER
;*********************************

SYMCOUNT	DD	0
LOCAL_SEARCH	DW	1


FIND_LABEL:	MOV	ES,[CS:CODERAM]		;POINT ES:DI TO CODESEG
		MOV	DS,[CS:SYMRAM] 		;POINT DS:SI TO BASE OF
		MOV	CX,SYMBANKS		;CX = AMOUNT OF BANKS
		
@@LOOP:		PUSH	CX
		CALL	SEARCH_BANK
		POP	CX

		CMP	AL,2			;END OF SYMTABLE REACHED
		JZ	@@QUIT			;JUMP IF SO

		CMP	AL,1			;LABEL FOUND
		JZ	@@FOUND			;JUMP IF SO

		DEC	CX    			;ANY MORE BANKS
		JZ	@@ERR1			;JUMP IF NOT

		MOV	AX,DS			;MUST BE ANOTHER TABLE THEN
		ADD	AX,SYMBANKSIZE		;SO GET NEXT BANK
		MOV	DS,AX

		JMP	@@LOOP

@@QUIT:		CMP	[CS:PASS],1		;IF IN PASS 1
		JZ	@@PASS1			;SAY TYPE_PASS1

		MOV	AL,0
		CLC				;RET NOT FOUND
		RET		

@@PASS1:       	MOV	EBX,0
		MOV	DX,0
		MOV	AL,TYPE_PASS1		;GET TYPE
		MOV	AH,0
		STC				;SAY FOUND ON PASS 1
		RET

@@FOUND:   	MOV	EBX,[SI+LAB_VALUE0]	;GET VALUE
		MOV	DX,[SI+LAB_VALUE4]	;GET VALUE

		MOV	AL,[SI+LAB_TYPE]	;GET TYPE
		MOV	AH,[SI+LAB_FLAGS]	;GET FLAG
		STC				;FOUND
		RET

@@ERR1:		FATAL	"Symbol table full"

;*********************************
; 	 SEARCH SYMBOL BANK
;	 ~~~~~~~~~~~~~~~~~~
;       CS:SI IS TEST LABEL
;	DS IS 64K LABEL BANK
;
;       STATUS RETURNED IN AL
;	~~~~~~~~~~~~~~~~~~~~~
;  	   ENDBANK = 0
;            FOUND = 1
;         ENDTABLE = 2
;*********************************

SEARCH_BANK:	MOV	SI,0			;TOP OF LABEL TABLE

		XOR	DH,DH			;REGISTOR STORAGE FOR SPEED
		XOR	CH,CH
		MOV	BP,OFFSET LABNAME
		MOV	BL,[BYTE CS:LABLEN]

@@TESTLOOP:	MOV	AL,[SI+LAB_TYPE]	;GET TYPE
		CMP	AL,TYPE_NULL		;IS LABLE TYPE 0	
		JZ	@@ENDTABLE	

		MOV	DL,[SI+LAB_NAMELEN]	;GET LABEL LEN IN SYMTAB
		ADD	SI,LAB_NAME		;ADD PAST HEADER

		CMP	BL,DL			;ARE LABELS SAME LEN ?
		JNZ	@@NOPE			;JUMP IF NOT

		CMP	AL,TYPE_STORAGE		;IS IT JUST STORAGE ?
		JNC	@@NOPE			;IGNOR THIS IF SO

		CMP	[BYTE SI],"@"
		JNZ	@@YEP

		CMP	[WORD CS:LOCAL_SEARCH],1 ;INCLUDE LOCALS
		JNZ	@@NOPE

@@YEP:		MOV	DI,BP			;COMPARE NAME
		MOV	CL,BL			;GET LABEL LENGTH

		PUSH	SI
		REPZ	CMPSB			;COMPARE LABLE
		POP	SI

		JZ	@@FOUND			;JUMP IF NOT THE SAME

@@NOPE:		ADD	SI,DX			;SKIP THIS LABEL

		CMP	SI,SYMEND		;KEEP GOING UNTIL THE
		JC	@@TESTLOOP		;LAST 256B	

		MOV	AL,0			;END OF THIS BANK REACHED
		RET

@@FOUND:	SUB	SI,LAB_NAME		;MOVE BACK TO START
		MOV	AL,1 			;FOUND SYMBOL
		RET

@@ENDTABLE:	MOV	AL,2			;END OF SYMTAB REACHED
		RET		

;*********************************
;      FIND NUMERIC LABEL VALUE
;        INPUT VALUE IN EBX
;*********************************

LABELVAL	DD	0

FIND_LAB_VALUE:	MOV	[CS:LABELVAL],EBX

		MOV	ES,[CS:CODERAM]		;POINT ES:DI TO CODESEG
		MOV	DS,[CS:SYMRAM] 		;POINT DS:SI TO BASE OF
		MOV	CX,SYMBANKS		;CX = AMOUNT OF BANKS
		
@@LOOP:		PUSH	CX
		CALL	SEARCH_VALUE
		POP	CX

		CMP	AL,2			;END OF SYMTABLE REACHED
		JZ	@@QUIT			;JUMP IF SO

		CMP	AL,1			;LABEL FOUND
		JZ	@@FOUND			;JUMP IF SO

		DEC	CX    			;ANY MORE BANKS
		JZ	@@ERR1			;JUMP IF NOT

		MOV	AX,DS			;MUST BE ANOTHER TABLE THEN
		ADD	AX,SYMBANKSIZE		;SO GET NEXT BANK
		MOV	DS,AX

		JMP	@@LOOP

@@QUIT:		CMP	[CS:PASS],1		;IF IN PASS 1
		JZ	@@PASS1			;SAY TYPE_PASS1

		MOV	AL,0
		CLC				;RET NOT FOUND
		RET		

@@PASS1:       	MOV	EBX,0
		MOV	DX,0
		MOV	AL,TYPE_PASS1		;GET TYPE
		MOV	AH,0
		STC				;SAY FOUND ON PASS 1
		RET

@@FOUND:   	MOV	EBX,[SI+LAB_VALUE0]	;GET VALUE
		MOV	DX,[SI+LAB_VALUE4]	;GET VALUE

		MOV	AL,[SI+LAB_TYPE]	;GET TYPE
		MOV	AH,[SI+LAB_FLAGS]	;GET FLAG
		STC				;FOUND
		RET

@@ERR1:		FATAL	"Symbol table full"

;*********************************
; 	 SEARCH SYMBOL BANK
;	 ~~~~~~~~~~~~~~~~~~
;       CS:SI IS TEST LABEL
;	DS IS 64K LABEL BANK
;
;       STATUS RETURNED IN AL
;	~~~~~~~~~~~~~~~~~~~~~
;  	   ENDBANK = 0
;            FOUND = 1
;         ENDTABLE = 2
;*********************************

SCTYPE		DW	TYPE_EQU

SEARCH_VALUE:	MOV	SI,0			;TOP OF LABEL TABLE

		XOR	DH,DH			;REGISTOR STORAGE FOR SPEED
		MOV	BL,[BYTE CS:LABLEN]

@@TESTLOOP:	MOV	AL,[SI+LAB_TYPE]	;GET TYPE
		CMP	AL,TYPE_NULL		;IS LABLE TYPE 0	
		JZ	@@ENDTABLE	

		MOV	DL,[SI+LAB_NAMELEN]	;GET LABEL LEN IN SYMTAB

		CMP	AL,TYPE_STORAGE		;IS IT JUST STORAGE ?
		JNC	@@NOPE			;IGNOR THIS IF SO

		CMP	AL,TYPE_TOKEN		;IS IT JUST STORAGE ?
		JZ	@@NOPE			;IGNOR THIS IF SO

		CMP	[BYTE CS:SCTYPE],TYPE_EQU
		JZ	@@OK

		CMP	AL,[BYTE CS:SCTYPE]	;ONLY 
		JNZ	@@NOPE

@@OK:		MOV	EAX,[CS:LABELVAL]
		CMP	EAX,[SI+LAB_VALUE0]
		JZ	@@FOUND

@@NOPE:		ADD	SI,LAB_NAME		;ADD PAST HEADER
		ADD	SI,DX			;SKIP THIS LABEL

		CMP	SI,SYMEND		;KEEP GOING UNTIL THE
		JC	@@TESTLOOP		;LAST 256B	

		MOV	AL,0			;END OF THIS BANK REACHED
		RET

@@FOUND:	CMP	[BYTE CS:SCTYPE],TYPE_EQU
		JNZ	@@NOTEQU

		CMP	[BYTE SI+LAB_NAME],'@'
		JZ	@@NOPE

@@NOTEQU:	MOV	AL,1 			;FOUND SYMBOL
		RET

@@ENDTABLE:	MOV	AL,2			;END OF SYMTAB REACHED
		RET		

;*********************************
; 	 SEARCH FOR OPCODE
;	 ~~~~~~~~~~~~~~~~~
;       CS:DI IS TEST LABEL
;
;       STATUS RETURNED IN CY
;	~~~~~~~~~~~~~~~~~~~~~
;            FOUND = CY
;         NOTFOUND = NOCY
;*********************************

NEXTSEARCH	DW	0

SEARCH_OPCODE:	MOV	[CS:NEXTSEARCH],0	;SET START SEARCH

CONTINUE_OPCODE:
		MOV	ES,[CS:CODERAM]		;POINT ES:DI TO CODESEG
		MOV	DS,[CS:SYMRAM] 		;POINT DS:SI TO BASE OF
		
		MOV	SI,[CS:NEXTSEARCH]	;TOP OF LABEL TABLE

		XOR	DH,DH			;REGISTOR STORAGE FOR SPEED
		XOR	CH,CH
		MOV	BP,OFFSET LABNAME
		MOV	BL,[BYTE CS:LABLEN]

@@TESTLOOP:	MOV	AL,[SI+LAB_TYPE]	;GET TYPE
		CMP	AL,TYPE_NULL		;IS LABLE TYPE 0	
		JZ	@@ENDTABLE	

		MOV	DL,[SI+LAB_NAMELEN]	;GET LABEL LEN IN SYMTAB
		ADD	SI,LAB_NAME		;ADD PAST HEADER

		CMP	AL,TYPE_OPCODE		;IS IT OPCODE ?
		JNZ	@@NOPE			;JUMP IF NOT

		CMP	BL,DL			;ARE LABELS SAME LEN ?
		JNZ	@@NOPE			;JUMP IF NOT

		MOV	DI,BP			;COMPARE NAME
		MOV	CL,BL			;GET LABEL LENGTH

		PUSH	SI
		REPZ	CMPSB			;COMPARE LABLE
		POP	SI

		JZ	@@FOUND			;JUMP IF NOT THE SAME

@@NOPE:		ADD	SI,DX			;SKIP THIS LABEL

		CMP	SI,SYMEND		;KEEP GOING UNTIL THE
		JC	@@TESTLOOP		;LAST 256B

@@ENDTABLE:	CLC
		RET

@@FOUND:	MOV	DI,SI			;MAKE DI = LABEL + NAME
		ADD	DI,DX			;GET NEXT LABEL POS
		MOV	[CS:NEXTSEARCH],DI	;SET UP CONTINUE

		SUB	SI,LAB_NAME		;MOVE BACK TO START OF LABEL

		MOV	AL,[DS:SI+LAB_TYPE]	;SAVE NEW TYPE
		MOV	AH,[DS:SI+LAB_FLAGS]	;SAVE FLAG

		MOV	EBX,[DS:SI+LAB_VALUE0]	;SAVE VALUE
		MOV	DX,[DS:SI+LAB_VALUE4]	;SAVE VALUE

		STC
		RET

;*********************************
;	 INSERT SOME DATA
;	 ~~~~~~~~~~~~~~~~
;RETURNS DX:BX WITH STORAGE ADDRESS
;
;    LABNEM MUST HOLD THE NAME
;LABLEN MUST HOLD THE NAME LENGTH
;*********************************

PUT_STORAGE:
		MOV	AL,TYPE_STORAGE		;SET STORAGE TYPE
		MOV	AH,0			;FLAG NULL

		MOV	DX,0			;NO VALUE
		MOV	EBX,0	       		;NO ADDRESS VALUE

		CALL	PUT_LABEL

		MOV	EBX,0			;CLEAR EBX

		MOV	BX,[CS:SYMADDR]
		MOV	DS,[CS:LASTSYMSEG]
		RET

;*********************************
;	INSERT A NEW LABEL
;	~~~~~~~~~~~~~~~~~~
;	   EBX = VALUE
;	   DX  = VALUE
;	   AL  = TYPE
;	   AH  = FLAG
;
;    LABNEM MUST HOLD THE NAME
;LABLEN MUST HOLD THE NAME LENGTH
;*********************************

SYMADDR		DW	0
SYMSEG		DW	0

LASTSYM		DW	0
LASTSYMSEG	DW	0

RESERVESYM	DW	0

PUT_LABEL:	CMP	[CS:PASS],2		;FOUND IN PASS 2
		JNZ	PUT_LABEL_ALWAYS

		RET

PUT_LABEL_ALWAYS:

		PUSH	AX
		PUSH	DX
		PUSH	EBX			;SAVE DATA

		PUSH	[CS:LOCAL_SEARCH]
		MOV	[WORD CS:LOCAL_SEARCH],0;NOT LOCALS
		CALL	FIND_LABEL		;DOES LABEL AREADY EXIST
		POP	[CS:LOCAL_SEARCH]
		MOV	CL,AL			;SAVE TYPE

		POP	EBX	
		POP	DX	
		POP	AX

		JNC	@@NOERROR		;IF NOT FOUND JUMP
	  
		CMP	CL,TYPE_PASS1		;IS IT A PASS1 ERROR
		JNZ	@@ERR1			;ERROR IF NOT
	 
@@NOERROR:	MOV	[CS:SYMADDR],SI		;STORE LAST SYMBOL ADDRESS
		MOV	[CS:SYMSEG],DS		;STORE LAST SYMBOL SEGMENT
			
		MOV	DI,SI			;DI NOW END OF SYMTAB
		MOV	ES,[CS:SYMSEG]		;GET SEGMENT ADDRESS

		MOV	[ES:DI+LAB_TYPE],AL	;SAVE NEW TYPE
		MOV	[ES:DI+LAB_FLAGS],AH	;SAVE FLAG

		MOV	[ES:DI+LAB_VALUE0],EBX	;SAVE VALUE
		MOV	[ES:DI+LAB_VALUE4],DX	;SAVE VALUE

		MOV	CX,[CS:LABLEN]		;COPY LABEL NAME
		MOV	[ES:DI+LAB_NAMELEN],CL

		MOV	SI,OFFSET LABNAME	;SOURCE STRING AT DS:SI
		MOV	DS,[CS:CODERAM]		;AT LABNAME

		ADD	DI,LAB_NAME		;ADD IN TO NAME IN SYMTAB

		REP	MOVSB			;COPY NAME

		MOV	[CS:LASTSYM],DI
		MOV	[CS:LASTSYMSEG],ES

		XOR	AL,AL			;MARK END OF TABLE
		STOSB

@@QUIT:		RET

@@ERR1:		MOV	AX,[CS:SYMSEG]		;GET SEGMENT ADDRESS
		CMP	AX,[CS:SYMRAM]
		JNZ	@@ERR2

		CMP	[CS:RESERVESYM],SI
		JNC	@@ERR3

@@ERR2:		CERROR	"'#' Symbol already defined elsewhere"
@@ERR3:		CERROR	"Cannot redefine reserved word '#'"
